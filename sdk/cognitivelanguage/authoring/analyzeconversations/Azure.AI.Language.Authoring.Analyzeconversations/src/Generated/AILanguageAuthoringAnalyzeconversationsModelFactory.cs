// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.AI.Language.Authoring.Analyzeconversations.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AILanguageAuthoringAnalyzeconversationsModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.Error"/>. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The target that caused the error, if applicable. </param>
        /// <param name="details"> An array of details about specific errors that led to this reported error. </param>
        /// <returns> A new <see cref="Models.Error"/> instance for mocking. </returns>
        public static Error Error(ErrorCode code = default, string message = null, string target = null, IEnumerable<Error> details = null)
        {
            details ??= new List<Error>();

            return new Error(code, message, target, details?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringTrainingJobOptions"/>. </summary>
        /// <param name="modelLabel"> Represents the output model label. </param>
        /// <param name="trainingConfigVersion">
        /// Represents training config version. By default, "latest" value is used which
        /// uses the latest released training config version.
        /// </param>
        /// <param name="trainingMode"> Represents the mode of the training operation. </param>
        /// <param name="evaluationOptions">
        /// Represents the evaluation options. By default, the evaluation kind is
        /// percentage, with training split percentage as 80, and testing split percentage
        /// as 20.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringTrainingJobOptions"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringTrainingJobOptions ConversationalAnalysisAuthoringTrainingJobOptions(string modelLabel = null, string trainingConfigVersion = null, ConversationalAnalysisAuthoringTrainingMode trainingMode = default, ConversationalAnalysisAuthoringEvaluationOptions evaluationOptions = null)
        {
            return new ConversationalAnalysisAuthoringTrainingJobOptions(modelLabel, trainingConfigVersion, trainingMode, evaluationOptions, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringTrainingJobResult"/>. </summary>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="trainingMode"> Represents the mode of the training operation. </param>
        /// <param name="trainingStatus"> Represents the model training status. </param>
        /// <param name="evaluationStatus"> Represents model evaluation status. </param>
        /// <param name="estimatedEndDateTime"> Represents the estimated end date time for training and evaluation. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringTrainingJobResult"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringTrainingJobResult ConversationalAnalysisAuthoringTrainingJobResult(string modelLabel = null, string trainingConfigVersion = null, ConversationalAnalysisAuthoringTrainingMode? trainingMode = null, ConversationalAnalysisAuthoringSubTrainingJobState trainingStatus = null, ConversationalAnalysisAuthoringSubTrainingJobState evaluationStatus = null, DateTimeOffset? estimatedEndDateTime = null)
        {
            return new ConversationalAnalysisAuthoringTrainingJobResult(
                modelLabel,
                trainingConfigVersion,
                trainingMode,
                trainingStatus,
                evaluationStatus,
                estimatedEndDateTime,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringSubTrainingJobState"/>. </summary>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <param name="startDateTime"> Represents the start date time. </param>
        /// <param name="endDateTime"> Represents the end date time. </param>
        /// <param name="status"> Represents the status of the sub-operation. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringSubTrainingJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringSubTrainingJobState ConversationalAnalysisAuthoringSubTrainingJobState(int percentComplete = default, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default)
        {
            return new ConversationalAnalysisAuthoringSubTrainingJobState(percentComplete, startDateTime, endDateTime, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringTrainingJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents training tasks detailed result. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringTrainingJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringTrainingJobState ConversationalAnalysisAuthoringTrainingJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null, ConversationalAnalysisAuthoringTrainingJobResult result = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringTrainingJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringWarning"/>. </summary>
        /// <param name="code"> The warning code. </param>
        /// <param name="message"> The warning message. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringWarning"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringWarning ConversationalAnalysisAuthoringWarning(string code = null, string message = null)
        {
            return new ConversationalAnalysisAuthoringWarning(code, message, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringCopyProjectJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringCopyProjectJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringCopyProjectJobState ConversationalAnalysisAuthoringCopyProjectJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringCopyProjectJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringProjectDeployment"/>. </summary>
        /// <param name="deploymentName"> Represents deployment name. </param>
        /// <param name="modelId"> Represents deployment modelId. </param>
        /// <param name="lastTrainedDateTime"> Represents deployment last trained time. </param>
        /// <param name="lastDeployedDateTime"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpirationDate"> Represents deployment expiration date in the runtime. </param>
        /// <param name="modelTrainingConfigVersion"> Represents model training config version. </param>
        /// <param name="assignedResources"> Represents the metadata of the assigned Azure resources. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringProjectDeployment"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringProjectDeployment ConversationalAnalysisAuthoringProjectDeployment(string deploymentName = null, string modelId = null, DateTimeOffset lastTrainedDateTime = default, DateTimeOffset lastDeployedDateTime = default, DateTimeOffset deploymentExpirationDate = default, string modelTrainingConfigVersion = null, IEnumerable<ConversationalAnalysisAuthoringDeploymentResource> assignedResources = null)
        {
            assignedResources ??= new List<ConversationalAnalysisAuthoringDeploymentResource>();

            return new ConversationalAnalysisAuthoringProjectDeployment(
                deploymentName,
                modelId,
                lastTrainedDateTime,
                lastDeployedDateTime,
                deploymentExpirationDate,
                modelTrainingConfigVersion,
                assignedResources?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringDeploymentResource"/>. </summary>
        /// <param name="resourceId"> Represents the Azure resource Id. </param>
        /// <param name="region"> Represents the resource region. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringDeploymentResource"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringDeploymentResource ConversationalAnalysisAuthoringDeploymentResource(string resourceId = null, string region = null)
        {
            return new ConversationalAnalysisAuthoringDeploymentResource(resourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringCreateDeploymentOptions"/>. </summary>
        /// <param name="trainedModelLabel"> Represents the trained model label. </param>
        /// <param name="assignedResourceIds">
        /// Represents the resource IDs to be assigned to the deployment.
        /// If provided, the deployment will be rolled out to the resources
        /// provided here as well as the original resource in which the project is created.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringCreateDeploymentOptions"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringCreateDeploymentOptions ConversationalAnalysisAuthoringCreateDeploymentOptions(string trainedModelLabel = null, IEnumerable<string> assignedResourceIds = null)
        {
            assignedResourceIds ??= new List<string>();

            return new ConversationalAnalysisAuthoringCreateDeploymentOptions(trainedModelLabel, assignedResourceIds?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringDeploymentJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringDeploymentJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringDeploymentJobState ConversationalAnalysisAuthoringDeploymentJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringDeploymentJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringExportProjectJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="resultUrl"> The URL to use in order to download the exported project. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringExportProjectJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringExportProjectJobState ConversationalAnalysisAuthoringExportProjectJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null, string resultUrl = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringExportProjectJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                resultUrl,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringImportProjectJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringImportProjectJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringImportProjectJobState ConversationalAnalysisAuthoringImportProjectJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringImportProjectJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringProjectTrainedModel"/>. </summary>
        /// <param name="label"> The trained model label. </param>
        /// <param name="modelId"> The model ID. </param>
        /// <param name="lastTrainedDateTime"> The last trained date time of the model. </param>
        /// <param name="lastTrainingDurationInSeconds"> The duration of the model's last training request in seconds. </param>
        /// <param name="modelExpirationDate"> The model expiration date. </param>
        /// <param name="modelTrainingConfigVersion"> The model training config version. </param>
        /// <param name="hasSnapshot"> The flag to indicate if the trained model has a snapshot ready. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringProjectTrainedModel"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringProjectTrainedModel ConversationalAnalysisAuthoringProjectTrainedModel(string label = null, string modelId = null, DateTimeOffset lastTrainedDateTime = default, int lastTrainingDurationInSeconds = default, DateTimeOffset modelExpirationDate = default, string modelTrainingConfigVersion = null, bool hasSnapshot = default)
        {
            return new ConversationalAnalysisAuthoringProjectTrainedModel(
                label,
                modelId,
                lastTrainedDateTime,
                lastTrainingDurationInSeconds,
                modelExpirationDate,
                modelTrainingConfigVersion,
                hasSnapshot,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringEvaluationJobResult"/>. </summary>
        /// <param name="evaluationOptions"> Represents the options used running the evaluation. </param>
        /// <param name="modelLabel"> Represents trained model label. </param>
        /// <param name="trainingConfigVersion"> Represents training config version. </param>
        /// <param name="percentComplete"> Represents progress percentage. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringEvaluationJobResult"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringEvaluationJobResult ConversationalAnalysisAuthoringEvaluationJobResult(ConversationalAnalysisAuthoringEvaluationOptions evaluationOptions = null, string modelLabel = null, string trainingConfigVersion = null, double percentComplete = default)
        {
            return new ConversationalAnalysisAuthoringEvaluationJobResult(evaluationOptions, modelLabel, trainingConfigVersion, percentComplete, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringEvaluationJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <param name="result"> Represents evaluation task detailed result. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringEvaluationJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringEvaluationJobState ConversationalAnalysisAuthoringEvaluationJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null, ConversationalAnalysisAuthoringEvaluationJobResult result = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringEvaluationJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                result,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringEvaluationResults"/>. </summary>
        /// <param name="value"> The utterances evaluation results. </param>
        /// <param name="nextLink"> The next page link. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringEvaluationResults"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringEvaluationResults ConversationalAnalysisAuthoringEvaluationResults(IEnumerable<ConversationalAnalysisAuthoringUtteranceEvaluationResult> value = null, string nextLink = null)
        {
            value ??= new List<ConversationalAnalysisAuthoringUtteranceEvaluationResult>();

            return new ConversationalAnalysisAuthoringEvaluationResults(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringUtteranceEvaluationResult"/>. </summary>
        /// <param name="text"> Represents the utterance text. </param>
        /// <param name="location"> Represents the conversation location. </param>
        /// <param name="language">
        /// Represents the utterance language. This is BCP-47 representation of a language.
        /// For example, use "en" for English, "en-gb" for English (UK), "es" for Spanish
        /// etc.
        /// </param>
        /// <param name="entitiesResult"> Represents the entities results for the utterance. </param>
        /// <param name="intentsResult"> Represents the intents results for the utterance. </param>
        /// <param name="labeledSummaryLocation"> Represents the location of the labeled summary. </param>
        /// <param name="predictedSummaryLocation"> Represents the location of the predicted summary. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringUtteranceEvaluationResult"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringUtteranceEvaluationResult ConversationalAnalysisAuthoringUtteranceEvaluationResult(string text = null, string location = null, string language = null, ConversationalAnalysisAuthoringUtteranceEntitiesEvaluationResult entitiesResult = null, ConversationalAnalysisAuthoringUtteranceIntentsEvaluationResult intentsResult = null, string labeledSummaryLocation = null, string predictedSummaryLocation = null)
        {
            return new ConversationalAnalysisAuthoringUtteranceEvaluationResult(
                text,
                location,
                language,
                entitiesResult,
                intentsResult,
                labeledSummaryLocation,
                predictedSummaryLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringUtteranceEntitiesEvaluationResult"/>. </summary>
        /// <param name="expectedEntities"> Represents the expected entity labels. </param>
        /// <param name="predictedEntities"> Represents the predicted entity labels. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringUtteranceEntitiesEvaluationResult"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringUtteranceEntitiesEvaluationResult ConversationalAnalysisAuthoringUtteranceEntitiesEvaluationResult(IEnumerable<ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult> expectedEntities = null, IEnumerable<ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult> predictedEntities = null)
        {
            expectedEntities ??= new List<ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult>();
            predictedEntities ??= new List<ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult>();

            return new ConversationalAnalysisAuthoringUtteranceEntitiesEvaluationResult(expectedEntities?.ToList(), predictedEntities?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult"/>. </summary>
        /// <param name="category"> Represents the entity category. </param>
        /// <param name="offset"> Represents the entity offset index relative to the original text. </param>
        /// <param name="length"> Represents the entity length. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult(string category = null, int offset = default, int length = default)
        {
            return new ConversationalAnalysisAuthoringUtteranceEntityEvaluationResult(category, offset, length, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringUtteranceIntentsEvaluationResult"/>. </summary>
        /// <param name="expectedIntent"> Represents the utterance's expected intent. </param>
        /// <param name="predictedIntent"> Represents the utterance's predicted intent. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringUtteranceIntentsEvaluationResult"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringUtteranceIntentsEvaluationResult ConversationalAnalysisAuthoringUtteranceIntentsEvaluationResult(string expectedIntent = null, string predictedIntent = null)
        {
            return new ConversationalAnalysisAuthoringUtteranceIntentsEvaluationResult(expectedIntent, predictedIntent, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringEvaluationSummary"/>. </summary>
        /// <param name="entitiesEvaluation"> Contains the data related to entities evaluation. </param>
        /// <param name="intentsEvaluation"> Contains the data related to intents evaluation. </param>
        /// <param name="evaluationOptions"> The options that were used while running the evaluation. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringEvaluationSummary"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringEvaluationSummary ConversationalAnalysisAuthoringEvaluationSummary(ConversationalAnalysisAuthoringEntitiesEvaluationSummary entitiesEvaluation = null, ConversationalAnalysisAuthoringIntentsEvaluationSummary intentsEvaluation = null, ConversationalAnalysisAuthoringEvaluationOptions evaluationOptions = null)
        {
            return new ConversationalAnalysisAuthoringEvaluationSummary(entitiesEvaluation, intentsEvaluation, evaluationOptions, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringEntitiesEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix">
        /// Represents the confusion matrix between two entities (the two entities can be
        /// the same). The matrix is between the entity that was labelled and the entity
        /// that was predicted.
        /// </param>
        /// <param name="entities"> Represents the entities evaluation summary. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision">
        /// Represents the micro precision. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <param name="microRecall">
        /// Represents the micro recall. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision">
        /// Represents the macro precision. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <param name="macroRecall">
        /// Represents the macro recall. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringEntitiesEvaluationSummary"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringEntitiesEvaluationSummary ConversationalAnalysisAuthoringEntitiesEvaluationSummary(ConversationalAnalysisAuthoringConfusionMatrix confusionMatrix = null, IReadOnlyDictionary<string, ConversationalAnalysisAuthoringEntityEvaluationSummary> entities = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            entities ??= new Dictionary<string, ConversationalAnalysisAuthoringEntityEvaluationSummary>();

            return new ConversationalAnalysisAuthoringEntitiesEvaluationSummary(
                confusionMatrix,
                entities,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringConfusionMatrix"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringConfusionMatrix"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringConfusionMatrix ConversationalAnalysisAuthoringConfusionMatrix(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConversationalAnalysisAuthoringConfusionMatrix(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringConfusionMatrixRow"/>. </summary>
        /// <param name="additionalProperties"> Additional Properties. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringConfusionMatrixRow"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringConfusionMatrixRow ConversationalAnalysisAuthoringConfusionMatrixRow(IReadOnlyDictionary<string, BinaryData> additionalProperties = null)
        {
            additionalProperties ??= new Dictionary<string, BinaryData>();

            return new ConversationalAnalysisAuthoringConfusionMatrixRow(additionalProperties);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringConfusionMatrixCell"/>. </summary>
        /// <param name="normalizedValue"> Represents normalized value in percentages. </param>
        /// <param name="rawValue"> Represents raw value. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringConfusionMatrixCell"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringConfusionMatrixCell ConversationalAnalysisAuthoringConfusionMatrixCell(float normalizedValue = default, float rawValue = default)
        {
            return new ConversationalAnalysisAuthoringConfusionMatrixCell(normalizedValue, rawValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringEntityEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringEntityEvaluationSummary"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringEntityEvaluationSummary ConversationalAnalysisAuthoringEntityEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new ConversationalAnalysisAuthoringEntityEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringIntentsEvaluationSummary"/>. </summary>
        /// <param name="confusionMatrix">
        /// Represents the confusion matrix between two intents (the two intents can be the
        /// same). The matrix is between the intent that was labelled and the intent that
        /// was predicted.
        /// </param>
        /// <param name="intents"> Represents the intents evaluation summary. </param>
        /// <param name="microF1"> Represents the micro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="microPrecision">
        /// Represents the micro precision. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <param name="microRecall">
        /// Represents the micro recall. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <param name="macroF1"> Represents the macro F1. Expected value is a float between 0 and 1 inclusive. </param>
        /// <param name="macroPrecision">
        /// Represents the macro precision. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <param name="macroRecall">
        /// Represents the macro recall. Expected value is a float between 0 and 1
        /// inclusive.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringIntentsEvaluationSummary"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringIntentsEvaluationSummary ConversationalAnalysisAuthoringIntentsEvaluationSummary(ConversationalAnalysisAuthoringConfusionMatrix confusionMatrix = null, IReadOnlyDictionary<string, ConversationalAnalysisAuthoringIntentEvaluationSummary> intents = null, float microF1 = default, float microPrecision = default, float microRecall = default, float macroF1 = default, float macroPrecision = default, float macroRecall = default)
        {
            intents ??= new Dictionary<string, ConversationalAnalysisAuthoringIntentEvaluationSummary>();

            return new ConversationalAnalysisAuthoringIntentsEvaluationSummary(
                confusionMatrix,
                intents,
                microF1,
                microPrecision,
                microRecall,
                macroF1,
                macroPrecision,
                macroRecall,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringIntentEvaluationSummary"/>. </summary>
        /// <param name="f1"> Represents the model precision. </param>
        /// <param name="precision"> Represents the model recall. </param>
        /// <param name="recall"> Represents the model F1 score. </param>
        /// <param name="truePositiveCount"> Represents the count of true positive. </param>
        /// <param name="trueNegativeCount"> Represents the count of true negative. </param>
        /// <param name="falsePositiveCount"> Represents the count of false positive. </param>
        /// <param name="falseNegativeCount"> Represents the count of false negative. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringIntentEvaluationSummary"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringIntentEvaluationSummary ConversationalAnalysisAuthoringIntentEvaluationSummary(double f1 = default, double precision = default, double recall = default, int truePositiveCount = default, int trueNegativeCount = default, int falsePositiveCount = default, int falseNegativeCount = default)
        {
            return new ConversationalAnalysisAuthoringIntentEvaluationSummary(
                f1,
                precision,
                recall,
                truePositiveCount,
                trueNegativeCount,
                falsePositiveCount,
                falseNegativeCount,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringLoadSnapshotJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringLoadSnapshotJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringLoadSnapshotJobState ConversationalAnalysisAuthoringLoadSnapshotJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringLoadSnapshotJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringAssignedDeploymentResource"/>. </summary>
        /// <param name="azureResourceId"> The resource ID. </param>
        /// <param name="region"> The resource region. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringAssignedDeploymentResource"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringAssignedDeploymentResource ConversationalAnalysisAuthoringAssignedDeploymentResource(string azureResourceId = null, string region = null)
        {
            return new ConversationalAnalysisAuthoringAssignedDeploymentResource(azureResourceId, region, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringDeploymentResourcesJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringDeploymentResourcesJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringDeploymentResourcesJobState ConversationalAnalysisAuthoringDeploymentResourcesJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringDeploymentResourcesJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringProjectDeletionJobState"/>. </summary>
        /// <param name="jobId"> The job ID. </param>
        /// <param name="createdDateTime"> The creation date time of the job. </param>
        /// <param name="lastUpdatedDateTime"> The last date time the job was updated. </param>
        /// <param name="expirationDateTime"> The expiration date time of the job. </param>
        /// <param name="status"> The job status. </param>
        /// <param name="warnings"> The warnings that were encountered while executing the job. </param>
        /// <param name="errors"> The errors encountered while executing the job. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringProjectDeletionJobState"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringProjectDeletionJobState ConversationalAnalysisAuthoringProjectDeletionJobState(string jobId = null, DateTimeOffset createdDateTime = default, DateTimeOffset lastUpdatedDateTime = default, DateTimeOffset? expirationDateTime = null, ConversationalAnalysisAuthoringJobStatus status = default, IEnumerable<ConversationalAnalysisAuthoringWarning> warnings = null, IEnumerable<Error> errors = null)
        {
            warnings ??= new List<ConversationalAnalysisAuthoringWarning>();
            errors ??= new List<Error>();

            return new ConversationalAnalysisAuthoringProjectDeletionJobState(
                jobId,
                createdDateTime,
                lastUpdatedDateTime,
                expirationDateTime,
                status,
                warnings?.ToList(),
                errors?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringAssignedResourceDeploymentsMetadata"/>. </summary>
        /// <param name="value"> The list of retrieved assigned project deployments. </param>
        /// <param name="nextLink"> The next page link. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringAssignedResourceDeploymentsMetadata"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringAssignedResourceDeploymentsMetadata ConversationalAnalysisAuthoringAssignedResourceDeploymentsMetadata(IEnumerable<ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata> value = null, string nextLink = null)
        {
            value ??= new List<ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata>();

            return new ConversationalAnalysisAuthoringAssignedResourceDeploymentsMetadata(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata"/>. </summary>
        /// <param name="projectName"> Represents the project name. </param>
        /// <param name="deploymentsMetadata"> Represents the resource region. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata(string projectName = null, IEnumerable<ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata> deploymentsMetadata = null)
        {
            deploymentsMetadata ??= new List<ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata>();

            return new ConversationalAnalysisAuthoringAssignedProjectDeploymentsMetadata(projectName, deploymentsMetadata?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata"/>. </summary>
        /// <param name="deploymentName"> Represents the deployment name. </param>
        /// <param name="lastDeployedDateTime"> Represents deployment last deployed time. </param>
        /// <param name="deploymentExpirationDate"> Represents deployment expiration date in the runtime. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata(string deploymentName = null, DateTimeOffset lastDeployedDateTime = default, DateTimeOffset deploymentExpirationDate = default)
        {
            return new ConversationalAnalysisAuthoringAssignedProjectDeploymentMetadata(deploymentName, lastDeployedDateTime, deploymentExpirationDate, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringSupportedLanguages"/>. </summary>
        /// <param name="value"> The list of the languages. </param>
        /// <param name="nextLink"> The next page link. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringSupportedLanguages"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringSupportedLanguages ConversationalAnalysisAuthoringSupportedLanguages(IEnumerable<ConversationalAnalysisAuthoringSupportedLanguage> value = null, string nextLink = null)
        {
            value ??= new List<ConversationalAnalysisAuthoringSupportedLanguage>();

            return new ConversationalAnalysisAuthoringSupportedLanguages(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringSupportedLanguage"/>. </summary>
        /// <param name="languageName"> The language name. </param>
        /// <param name="languageCode">
        /// The language code. This is BCP-47 representation of a language. For example,
        /// "en" for English, "en-gb" for English (UK), "es" for Spanish etc.
        /// </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringSupportedLanguage"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringSupportedLanguage ConversationalAnalysisAuthoringSupportedLanguage(string languageName = null, string languageCode = null)
        {
            return new ConversationalAnalysisAuthoringSupportedLanguage(languageName, languageCode, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringPrebuiltEntities"/>. </summary>
        /// <param name="value"> The supported prebuilt entities. </param>
        /// <param name="nextLink"> The next page link. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringPrebuiltEntities"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringPrebuiltEntities ConversationalAnalysisAuthoringPrebuiltEntities(IEnumerable<ConversationalAnalysisAuthoringPrebuiltEntity> value = null, string nextLink = null)
        {
            value ??= new List<ConversationalAnalysisAuthoringPrebuiltEntity>();

            return new ConversationalAnalysisAuthoringPrebuiltEntities(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringPrebuiltEntity"/>. </summary>
        /// <param name="category"> The prebuilt entity category. </param>
        /// <param name="description"> The description. </param>
        /// <param name="examples"> English examples for the entity. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringPrebuiltEntity"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringPrebuiltEntity ConversationalAnalysisAuthoringPrebuiltEntity(string category = null, string description = null, string examples = null)
        {
            return new ConversationalAnalysisAuthoringPrebuiltEntity(category, description, examples, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringTrainingConfigVersions"/>. </summary>
        /// <param name="value"> The list of the training config versions. </param>
        /// <param name="nextLink"> The next page link. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringTrainingConfigVersions"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringTrainingConfigVersions ConversationalAnalysisAuthoringTrainingConfigVersions(IEnumerable<ConversationalAnalysisAuthoringTrainingConfigVersionInfo> value = null, string nextLink = null)
        {
            value ??= new List<ConversationalAnalysisAuthoringTrainingConfigVersionInfo>();

            return new ConversationalAnalysisAuthoringTrainingConfigVersions(value?.ToList(), nextLink, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ConversationalAnalysisAuthoringTrainingConfigVersionInfo"/>. </summary>
        /// <param name="trainingConfigVersion"> Represents the version of the config. </param>
        /// <param name="modelExpirationDate"> Represents the training config version expiration date. </param>
        /// <returns> A new <see cref="Models.ConversationalAnalysisAuthoringTrainingConfigVersionInfo"/> instance for mocking. </returns>
        public static ConversationalAnalysisAuthoringTrainingConfigVersionInfo ConversationalAnalysisAuthoringTrainingConfigVersionInfo(string trainingConfigVersion = null, DateTimeOffset modelExpirationDate = default)
        {
            return new ConversationalAnalysisAuthoringTrainingConfigVersionInfo(trainingConfigVersion, modelExpirationDate, serializedAdditionalRawData: null);
        }
    }
}
