// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.AI.Language.Authoring.Analyzeconversations.Models
{
    /// <summary> The ConversationalAnalysisAuthoringProjectKind. </summary>
    public readonly partial struct ConversationalAnalysisAuthoringProjectKind : IEquatable<ConversationalAnalysisAuthoringProjectKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConversationalAnalysisAuthoringProjectKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConversationalAnalysisAuthoringProjectKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConversationValue = "Conversation";
        private const string OrchestrationValue = "Orchestration";
        private const string CustomConversationSummarizationValue = "CustomConversationSummarization";

        /// <summary> A project to build natural language into apps, bots, and IoT devices. </summary>
        public static ConversationalAnalysisAuthoringProjectKind Conversation { get; } = new ConversationalAnalysisAuthoringProjectKind(ConversationValue);
        /// <summary>
        /// A project to connect and orchestrate Conversation, Custom question answering
        /// and LUIS projects together in one single project.
        /// </summary>
        public static ConversationalAnalysisAuthoringProjectKind Orchestration { get; } = new ConversationalAnalysisAuthoringProjectKind(OrchestrationValue);
        /// <summary>
        /// A project to build conversation summarization models which are able to
        /// summarize long conversations.
        /// </summary>
        public static ConversationalAnalysisAuthoringProjectKind CustomConversationSummarization { get; } = new ConversationalAnalysisAuthoringProjectKind(CustomConversationSummarizationValue);
        /// <summary> Determines if two <see cref="ConversationalAnalysisAuthoringProjectKind"/> values are the same. </summary>
        public static bool operator ==(ConversationalAnalysisAuthoringProjectKind left, ConversationalAnalysisAuthoringProjectKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConversationalAnalysisAuthoringProjectKind"/> values are not the same. </summary>
        public static bool operator !=(ConversationalAnalysisAuthoringProjectKind left, ConversationalAnalysisAuthoringProjectKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ConversationalAnalysisAuthoringProjectKind"/>. </summary>
        public static implicit operator ConversationalAnalysisAuthoringProjectKind(string value) => new ConversationalAnalysisAuthoringProjectKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConversationalAnalysisAuthoringProjectKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConversationalAnalysisAuthoringProjectKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
