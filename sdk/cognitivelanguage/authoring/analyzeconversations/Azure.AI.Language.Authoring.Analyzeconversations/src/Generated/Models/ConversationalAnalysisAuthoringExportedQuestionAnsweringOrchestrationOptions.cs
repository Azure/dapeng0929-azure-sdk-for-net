// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.AI.Language.Authoring.Analyzeconversations.Models
{
    /// <summary> Represents the orchestration options for a Question Answering project target. </summary>
    public partial class ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions : ConversationalAnalysisAuthoringExportedOrchestrationOptions
    {
        /// <summary> Initializes a new instance of <see cref="ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions"/>. </summary>
        /// <param name="questionAnsweringOrchestration"> The Question Answering project details. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="questionAnsweringOrchestration"/> is null. </exception>
        public ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions(ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestration questionAnsweringOrchestration)
        {
            Argument.AssertNotNull(questionAnsweringOrchestration, nameof(questionAnsweringOrchestration));

            TargetProjectKind = ConversationalAnalysisAuthoringOrchestrationTargetProjectKind.QuestionAnswering;
            QuestionAnsweringOrchestration = questionAnsweringOrchestration;
        }

        /// <summary> Initializes a new instance of <see cref="ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions"/>. </summary>
        /// <param name="targetProjectKind"> Discriminator. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        /// <param name="questionAnsweringOrchestration"> The Question Answering project details. </param>
        internal ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions(ConversationalAnalysisAuthoringOrchestrationTargetProjectKind targetProjectKind, IDictionary<string, BinaryData> serializedAdditionalRawData, ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestration questionAnsweringOrchestration) : base(targetProjectKind, serializedAdditionalRawData)
        {
            QuestionAnsweringOrchestration = questionAnsweringOrchestration;
        }

        /// <summary> Initializes a new instance of <see cref="ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions"/> for deserialization. </summary>
        internal ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestrationOptions()
        {
        }

        /// <summary> The Question Answering project details. </summary>
        public ConversationalAnalysisAuthoringExportedQuestionAnsweringOrchestration QuestionAnsweringOrchestration { get; set; }
    }
}
