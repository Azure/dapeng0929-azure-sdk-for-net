// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Health.Deidentification
{
    /// <summary> Customizations options to override default service behaviors. </summary>
    public partial class CustomizationOptions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CustomizationOptions"/>. </summary>
        public CustomizationOptions()
        {
        }

        /// <summary> Initializes a new instance of <see cref="CustomizationOptions"/>. </summary>
        /// <param name="redactionFormat"> Format of the redacted output. Only valid when Operation is Redact. </param>
        /// <param name="disableConsistency"> When set to true during a job, the service will surrogate all documents individually. </param>
        /// <param name="overwrite"> When set to true during a job, the service will overwrite the output location if it already exists. </param>
        /// <param name="locale"> Language and Locale that the service should use. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CustomizationOptions(string redactionFormat, bool? disableConsistency, bool? overwrite, string locale, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            RedactionFormat = redactionFormat;
            DisableConsistency = disableConsistency;
            Overwrite = overwrite;
            Locale = locale;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Format of the redacted output. Only valid when Operation is Redact. </summary>
        public string RedactionFormat { get; set; }
        /// <summary> When set to true during a job, the service will surrogate all documents individually. </summary>
        public bool? DisableConsistency { get; set; }
        /// <summary> When set to true during a job, the service will overwrite the output location if it already exists. </summary>
        public bool? Overwrite { get; set; }
        /// <summary> Language and Locale that the service should use. </summary>
        public string Locale { get; set; }
    }
}
