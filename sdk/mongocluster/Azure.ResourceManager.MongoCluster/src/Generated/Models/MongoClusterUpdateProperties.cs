// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.MongoCluster.Models
{
    /// <summary> The MongoClusterUpdateProperties. </summary>
    public partial class MongoClusterUpdateProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="MongoClusterUpdateProperties"/>. </summary>
        public MongoClusterUpdateProperties()
        {
            PreviewFeatures = new ChangeTrackingList<MongoClusterPreviewFeature>();
        }

        /// <summary> Initializes a new instance of <see cref="MongoClusterUpdateProperties"/>. </summary>
        /// <param name="administrator"></param>
        /// <param name="serverVersion"></param>
        /// <param name="publicNetworkAccess"></param>
        /// <param name="highAvailability"></param>
        /// <param name="storage"></param>
        /// <param name="sharding"></param>
        /// <param name="compute"></param>
        /// <param name="backup"></param>
        /// <param name="previewFeatures"></param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal MongoClusterUpdateProperties(MongoClusterAdministratorProperties administrator, string serverVersion, MongoClusterPublicNetworkAccess? publicNetworkAccess, HighAvailabilityProperties highAvailability, StorageProperties storage, ShardingProperties sharding, ComputeProperties compute, BackupProperties backup, IList<MongoClusterPreviewFeature> previewFeatures, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Administrator = administrator;
            ServerVersion = serverVersion;
            PublicNetworkAccess = publicNetworkAccess;
            HighAvailability = highAvailability;
            Storage = storage;
            Sharding = sharding;
            Compute = compute;
            Backup = backup;
            PreviewFeatures = previewFeatures;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Gets or sets the administrator. </summary>
        public MongoClusterAdministratorProperties Administrator { get; set; }
        /// <summary> Gets or sets the server version. </summary>
        public string ServerVersion { get; set; }
        /// <summary> Gets or sets the public network access. </summary>
        public MongoClusterPublicNetworkAccess? PublicNetworkAccess { get; set; }
        /// <summary> Gets or sets the high availability. </summary>
        internal HighAvailabilityProperties HighAvailability { get; set; }
        /// <summary> Gets or sets the high availability target mode. </summary>
        public HighAvailabilityMode? HighAvailabilityTargetMode
        {
            get => HighAvailability is null ? default : HighAvailability.TargetMode;
            set
            {
                if (HighAvailability is null)
                    HighAvailability = new HighAvailabilityProperties();
                HighAvailability.TargetMode = value;
            }
        }

        /// <summary> Gets or sets the storage. </summary>
        internal StorageProperties Storage { get; set; }
        /// <summary> Gets or sets the storage size gb. </summary>
        public long? StorageSizeGb
        {
            get => Storage is null ? default : Storage.SizeGb;
            set
            {
                if (Storage is null)
                    Storage = new StorageProperties();
                Storage.SizeGb = value;
            }
        }

        /// <summary> Gets or sets the sharding. </summary>
        internal ShardingProperties Sharding { get; set; }
        /// <summary> Gets or sets the sharding shard count. </summary>
        public int? ShardingShardCount
        {
            get => Sharding is null ? default : Sharding.ShardCount;
            set
            {
                if (Sharding is null)
                    Sharding = new ShardingProperties();
                Sharding.ShardCount = value;
            }
        }

        /// <summary> Gets or sets the compute. </summary>
        internal ComputeProperties Compute { get; set; }
        /// <summary> Gets or sets the compute tier. </summary>
        public string ComputeTier
        {
            get => Compute is null ? default : Compute.Tier;
            set
            {
                if (Compute is null)
                    Compute = new ComputeProperties();
                Compute.Tier = value;
            }
        }

        /// <summary> Gets or sets the backup. </summary>
        internal BackupProperties Backup { get; set; }
        /// <summary> Gets the backup earliest restore time. </summary>
        public string BackupEarliestRestoreTime
        {
            get => Backup is null ? default : Backup.EarliestRestoreTime;
        }

        /// <summary> Gets the preview features. </summary>
        public IList<MongoClusterPreviewFeature> PreviewFeatures { get; }
    }
}
