// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.App
{
    /// <summary> Code execution file resource properties. </summary>
    public partial class CodeExecutionFileProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="CodeExecutionFileProperties"/>. </summary>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="size"> The size of the file. </param>
        /// <param name="lastModifiedTime"> The date time when the file was last modified. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filename"/> is null. </exception>
        internal CodeExecutionFileProperties(string filename, long size, DateTimeOffset lastModifiedTime)
        {
            Argument.AssertNotNull(filename, nameof(filename));

            Filename = filename;
            Size = size;
            LastModifiedTime = lastModifiedTime;
        }

        /// <summary> Initializes a new instance of <see cref="CodeExecutionFileProperties"/>. </summary>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="size"> The size of the file. </param>
        /// <param name="lastModifiedTime"> The date time when the file was last modified. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal CodeExecutionFileProperties(string filename, long size, DateTimeOffset lastModifiedTime, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Filename = filename;
            Size = size;
            LastModifiedTime = lastModifiedTime;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="CodeExecutionFileProperties"/> for deserialization. </summary>
        internal CodeExecutionFileProperties()
        {
        }

        /// <summary> The name of the file. </summary>
        public string Filename { get; }
        /// <summary> The size of the file. </summary>
        public long Size { get; }
        /// <summary> The date time when the file was last modified. </summary>
        public DateTimeOffset LastModifiedTime { get; }
    }
}
