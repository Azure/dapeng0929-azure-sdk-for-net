// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Microsoft.App
{
    /// <summary> The result containing the result of the code execution. </summary>
    public partial class SessionCodeExecutionResult
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResult"/>. </summary>
        /// <param name="codeInputType"> The code input type of the code execution request. </param>
        /// <param name="executionType"> The execution type of the code execution request. </param>
        /// <param name="networkStatus"> The network status of the code execution session. </param>
        /// <param name="multiArrayStatus"> The multi array status of the code execution session. </param>
        /// <param name="code"> The string of the code to execute, based on CodeInputType. </param>
        /// <param name="timeoutInSeconds"> Code execution timeout in seconds. </param>
        /// <param name="status"> The status of the code execution, indicates whether succeeded or not. </param>
        /// <param name="stdout"> The standard output of the code execution. </param>
        /// <param name="stderr"> The standard error of the code execution. </param>
        /// <param name="result"> The result of the code execution. </param>
        /// <param name="executionTimeInMilliseconds"> The execution time of the code in milliseconds. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="code"/>, <paramref name="stdout"/>, <paramref name="stderr"/> or <paramref name="result"/> is null. </exception>
        internal SessionCodeExecutionResult(CodeInputType codeInputType, ExecutionType executionType, NetworkStatus networkStatus, MultiArrayStatus multiArrayStatus, string code, long timeoutInSeconds, CodeExecutionStatus status, string stdout, string stderr, BinaryData result, long executionTimeInMilliseconds)
        {
            Argument.AssertNotNull(code, nameof(code));
            Argument.AssertNotNull(stdout, nameof(stdout));
            Argument.AssertNotNull(stderr, nameof(stderr));
            Argument.AssertNotNull(result, nameof(result));

            CodeInputType = codeInputType;
            ExecutionType = executionType;
            NetworkStatus = networkStatus;
            MultiArrayStatus = multiArrayStatus;
            Code = code;
            TimeoutInSeconds = timeoutInSeconds;
            Status = status;
            Stdout = stdout;
            Stderr = stderr;
            Result = result;
            ExecutionTimeInMilliseconds = executionTimeInMilliseconds;
        }

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResult"/>. </summary>
        /// <param name="codeInputType"> The code input type of the code execution request. </param>
        /// <param name="executionType"> The execution type of the code execution request. </param>
        /// <param name="networkStatus"> The network status of the code execution session. </param>
        /// <param name="multiArrayStatus"> The multi array status of the code execution session. </param>
        /// <param name="code"> The string of the code to execute, based on CodeInputType. </param>
        /// <param name="timeoutInSeconds"> Code execution timeout in seconds. </param>
        /// <param name="id"> Session code execution id. </param>
        /// <param name="status"> The status of the code execution, indicates whether succeeded or not. </param>
        /// <param name="stdout"> The standard output of the code execution. </param>
        /// <param name="stderr"> The standard error of the code execution. </param>
        /// <param name="result"> The result of the code execution. </param>
        /// <param name="executionTimeInMilliseconds"> The execution time of the code in milliseconds. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SessionCodeExecutionResult(CodeInputType codeInputType, ExecutionType executionType, NetworkStatus networkStatus, MultiArrayStatus multiArrayStatus, string code, long timeoutInSeconds, string id, CodeExecutionStatus status, string stdout, string stderr, BinaryData result, long executionTimeInMilliseconds, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            CodeInputType = codeInputType;
            ExecutionType = executionType;
            NetworkStatus = networkStatus;
            MultiArrayStatus = multiArrayStatus;
            Code = code;
            TimeoutInSeconds = timeoutInSeconds;
            Id = id;
            Status = status;
            Stdout = stdout;
            Stderr = stderr;
            Result = result;
            ExecutionTimeInMilliseconds = executionTimeInMilliseconds;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="SessionCodeExecutionResult"/> for deserialization. </summary>
        internal SessionCodeExecutionResult()
        {
        }

        /// <summary> The code input type of the code execution request. </summary>
        public CodeInputType CodeInputType { get; }
        /// <summary> The execution type of the code execution request. </summary>
        public ExecutionType ExecutionType { get; }
        /// <summary> The network status of the code execution session. </summary>
        public NetworkStatus NetworkStatus { get; }
        /// <summary> The multi array status of the code execution session. </summary>
        public MultiArrayStatus MultiArrayStatus { get; }
        /// <summary> The string of the code to execute, based on CodeInputType. </summary>
        public string Code { get; }
        /// <summary> Code execution timeout in seconds. </summary>
        public long TimeoutInSeconds { get; }
        /// <summary> Session code execution id. </summary>
        public string Id { get; }
        /// <summary> The status of the code execution, indicates whether succeeded or not. </summary>
        public CodeExecutionStatus Status { get; }
        /// <summary> The standard output of the code execution. </summary>
        public string Stdout { get; }
        /// <summary> The standard error of the code execution. </summary>
        public string Stderr { get; }
        /// <summary>
        /// The result of the code execution.
        /// <para>
        /// To assign an object to this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        public BinaryData Result { get; }
        /// <summary> The execution time of the code in milliseconds. </summary>
        public long ExecutionTimeInMilliseconds { get; }
    }
}
