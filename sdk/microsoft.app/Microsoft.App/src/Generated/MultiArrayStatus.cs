// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Microsoft.App
{
    /// <summary> Multi array status. </summary>
    public readonly partial struct MultiArrayStatus : IEquatable<MultiArrayStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MultiArrayStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MultiArrayStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MultiArrayEnabledValue = "MultiArrayEnabled";
        private const string MultiArrayDisabledValue = "MultiArrayDisabled";

        /// <summary> Multi array enabled. </summary>
        public static MultiArrayStatus MultiArrayEnabled { get; } = new MultiArrayStatus(MultiArrayEnabledValue);
        /// <summary> Multi array disabled. </summary>
        public static MultiArrayStatus MultiArrayDisabled { get; } = new MultiArrayStatus(MultiArrayDisabledValue);
        /// <summary> Determines if two <see cref="MultiArrayStatus"/> values are the same. </summary>
        public static bool operator ==(MultiArrayStatus left, MultiArrayStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MultiArrayStatus"/> values are not the same. </summary>
        public static bool operator !=(MultiArrayStatus left, MultiArrayStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MultiArrayStatus"/>. </summary>
        public static implicit operator MultiArrayStatus(string value) => new MultiArrayStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MultiArrayStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MultiArrayStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
