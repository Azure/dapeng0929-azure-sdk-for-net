// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Microsoft.App
{
    // Data plane generated sub-client.
    /// <summary> The CodeExecutionFiles sub-client. </summary>
    public partial class CodeExecutionFiles
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://dynamicsessions.io/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CodeExecutionFiles for mocking. </summary>
        protected CodeExecutionFiles()
        {
        }

        /// <summary> Initializes a new instance of CodeExecutionFiles. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The <see cref="Uri"/> to use. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal CodeExecutionFiles(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get the file resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileMetadataAsync(Guid,string,string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<GetFileMetadataResponse>> GetFileMetadataAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFileMetadataAsync(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context).ConfigureAwait(false);
            return Response.FromValue(GetFileMetadataResponse.FromResponse(response), response);
        }

        /// <summary> Get the file resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileMetadata(Guid,string,string,string,string,CancellationToken)']/*" />
        public virtual Response<GetFileMetadataResponse> GetFileMetadata(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFileMetadata(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
            return Response.FromValue(GetFileMetadataResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get the file resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFileMetadataAsync(Guid,string,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileMetadataAsync(Guid,string,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetFileMetadataAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.GetFileMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFileMetadataRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the file resource.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFileMetadata(Guid,string,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileMetadata(Guid,string,string,string,string,RequestContext)']/*" />
        public virtual Response GetFileMetadata(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.GetFileMetadata");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFileMetadataRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete the file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='DeleteFileAsync(Guid,string,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> DeleteFileAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.DeleteFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteFileRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        // The convenience method is omitted here because it has exactly the same parameter list as the corresponding protocol method
        /// <summary>
        /// [Protocol Method] Delete the file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='DeleteFile(Guid,string,string,string,string,RequestContext)']/*" />
        public virtual Response DeleteFile(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.DeleteFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteFileRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get the content of the file. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileContentAsync(Guid,string,string,string,string,CancellationToken)']/*" />
        public virtual async Task<Response<BinaryData>> GetFileContentAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetFileContentAsync(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context).ConfigureAwait(false);
            return Response.FromValue(response.Content, response);
        }

        /// <summary> Get the content of the file. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileContent(Guid,string,string,string,string,CancellationToken)']/*" />
        public virtual Response<BinaryData> GetFileContent(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetFileContent(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
            return Response.FromValue(response.Content, response);
        }

        /// <summary>
        /// [Protocol Method] Get the content of the file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFileContentAsync(Guid,string,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileContentAsync(Guid,string,string,string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetFileContentAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.GetFileContent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFileContentRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the content of the file.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetFileContent(Guid,string,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetFileContent(Guid,string,string,string,string,RequestContext)']/*" />
        public virtual Response GetFileContent(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.GetFileContent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetFileContentRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Upload a file to a session. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="file"> The file to upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/>, <paramref name="identifier"/> or <paramref name="file"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='UploadFileAsync(Guid,string,string,string,string,Stream,CancellationToken)']/*" />
        public virtual async Task<Response<CodeExecutionFileCollection>> UploadFileAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, Stream file, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(file, nameof(file));

            UploadFileRequest uploadFileRequest = new UploadFileRequest(file, null);
            using MultipartFormDataRequestContent content = uploadFileRequest.ToMultipartRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await UploadFileAsync(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, content, content.ContentType, context).ConfigureAwait(false);
            return Response.FromValue(CodeExecutionFileCollection.FromResponse(response), response);
        }

        /// <summary> Upload a file to a session. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="file"> The file to upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/>, <paramref name="identifier"/> or <paramref name="file"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='UploadFile(Guid,string,string,string,string,Stream,CancellationToken)']/*" />
        public virtual Response<CodeExecutionFileCollection> UploadFile(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, Stream file, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(file, nameof(file));

            UploadFileRequest uploadFileRequest = new UploadFileRequest(file, null);
            using MultipartFormDataRequestContent content = uploadFileRequest.ToMultipartRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = UploadFile(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, content, content.ContentType, context);
            return Response.FromValue(CodeExecutionFileCollection.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Upload a file to a session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UploadFileAsync(Guid,string,string,string,string,Stream,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The content type for the operation. Always multipart/form-data for this operation. Allowed values: "multipart/form-data". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/>, <paramref name="identifier"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='UploadFileAsync(Guid,string,string,string,string,RequestContent,string,RequestContext)']/*" />
        public virtual async Task<Response> UploadFileAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContent content, string contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.UploadFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUploadFileRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Upload a file to a session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="UploadFile(Guid,string,string,string,string,Stream,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="filename"> The name of the file. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="contentType"> The content type for the operation. Always multipart/form-data for this operation. Allowed values: "multipart/form-data". </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/>, <paramref name="filename"/>, <paramref name="identifier"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="filename"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='UploadFile(Guid,string,string,string,string,RequestContent,string,RequestContext)']/*" />
        public virtual Response UploadFile(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContent content, string contentType, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNullOrEmpty(filename, nameof(filename));
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CodeExecutionFiles.UploadFile");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUploadFileRequest(subscriptionId, resourceGroupName, sessionPoolName, filename, identifier, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List the file resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="sessionPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetAllFileMetadataAsync(Guid,string,string,string,CancellationToken)']/*" />
        public virtual AsyncPageable<CodeExecutionFile> GetAllFileMetadataAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllFileMetadataRequest(subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllFileMetadataNextPageRequest(nextLink, subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => CodeExecutionFile.DeserializeCodeExecutionFile(e), ClientDiagnostics, _pipeline, "CodeExecutionFiles.GetAllFileMetadata", "value", "nextLink", context);
        }

        /// <summary> List the file resources. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="sessionPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetAllFileMetadata(Guid,string,string,string,CancellationToken)']/*" />
        public virtual Pageable<CodeExecutionFile> GetAllFileMetadata(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllFileMetadataRequest(subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllFileMetadataNextPageRequest(nextLink, subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => CodeExecutionFile.DeserializeCodeExecutionFile(e), ClientDiagnostics, _pipeline, "CodeExecutionFiles.GetAllFileMetadata", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List the file resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAllFileMetadataAsync(Guid,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="sessionPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetAllFileMetadataAsync(Guid,string,string,string,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetAllFileMetadataAsync(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNull(identifier, nameof(identifier));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllFileMetadataRequest(subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllFileMetadataNextPageRequest(nextLink, subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "CodeExecutionFiles.GetAllFileMetadata", "value", "nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] List the file resources.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetAllFileMetadata(Guid,string,string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="sessionPoolName"> The name of the session pool. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="sessionPoolName"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceGroupName"/> or <paramref name="sessionPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/CodeExecutionFiles.xml" path="doc/members/member[@name='GetAllFileMetadata(Guid,string,string,string,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetAllFileMetadata(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(sessionPoolName, nameof(sessionPoolName));
            Argument.AssertNotNull(identifier, nameof(identifier));

            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetAllFileMetadataRequest(subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetAllFileMetadataNextPageRequest(nextLink, subscriptionId, resourceGroupName, sessionPoolName, identifier, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "CodeExecutionFiles.GetAllFileMetadata", "value", "nextLink", context);
        }

        internal HttpMessage CreateGetAllFileMetadataRequest(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string identifier, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/sessionPools/", false);
            uri.AppendPath(sessionPoolName, true);
            uri.AppendPath("/files", false);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFileMetadataRequest(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/sessionPools/", false);
            uri.AppendPath(sessionPoolName, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filename, true);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteFileRequest(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/sessionPools/", false);
            uri.AppendPath(sessionPoolName, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filename, true);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetFileContentRequest(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/sessionPools/", false);
            uri.AppendPath(sessionPoolName, true);
            uri.AppendPath("/files/content/", false);
            uri.AppendPath(filename, true);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUploadFileRequest(Guid subscriptionId, string resourceGroupName, string sessionPoolName, string filename, string identifier, RequestContent content, string contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/sessionPools/", false);
            uri.AppendPath(sessionPoolName, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filename, true);
            uri.AppendPath(":uploadFile", false);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", contentType);
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetAllFileMetadataNextPageRequest(string nextLink, Guid subscriptionId, string resourceGroupName, string sessionPoolName, string identifier, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
