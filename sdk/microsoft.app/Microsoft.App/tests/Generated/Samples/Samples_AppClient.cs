// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.App.Samples
{
    public partial class Samples_AppClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_ExecuteCode_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                codeInputType = "Inline",
                executionType = "Synchronous",
                networkStatus = "EgressEnabled",
                multiArrayStatus = "MultiArrayEnabled",
                code = "<code>",
                timeoutInSeconds = 1234L,
            });
            Response response = client.ExecuteCode("<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_ExecuteCode_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                codeInputType = "Inline",
                executionType = "Synchronous",
                networkStatus = "EgressEnabled",
                multiArrayStatus = "MultiArrayEnabled",
                code = "<code>",
                timeoutInSeconds = 1234L,
            });
            Response response = await client.ExecuteCodeAsync("<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_ExecuteCode_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(
                CodeInputType.Inline,
                ExecutionType.Synchronous,
                NetworkStatus.EgressEnabled,
                MultiArrayStatus.MultiArrayEnabled,
                "<code>",
                1234L);
            Response<SessionCodeExecutionResult> response = client.ExecuteCode("<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_ExecuteCode_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(
                CodeInputType.Inline,
                ExecutionType.Synchronous,
                NetworkStatus.EgressEnabled,
                MultiArrayStatus.MultiArrayEnabled,
                "<code>",
                1234L);
            Response<SessionCodeExecutionResult> response = await client.ExecuteCodeAsync("<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_ExecuteCode_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                codeInputType = "Inline",
                executionType = "Synchronous",
                networkStatus = "EgressEnabled",
                multiArrayStatus = "MultiArrayEnabled",
                code = "<code>",
                timeoutInSeconds = 1234L,
            });
            Response response = client.ExecuteCode("<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_ExecuteCode_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                codeInputType = "Inline",
                executionType = "Synchronous",
                networkStatus = "EgressEnabled",
                multiArrayStatus = "MultiArrayEnabled",
                code = "<code>",
                timeoutInSeconds = 1234L,
            });
            Response response = await client.ExecuteCodeAsync("<identifier>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_ExecuteCode_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(
                CodeInputType.Inline,
                ExecutionType.Synchronous,
                NetworkStatus.EgressEnabled,
                MultiArrayStatus.MultiArrayEnabled,
                "<code>",
                1234L);
            Response<SessionCodeExecutionResult> response = client.ExecuteCode("<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_ExecuteCode_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(
                CodeInputType.Inline,
                ExecutionType.Synchronous,
                NetworkStatus.EgressEnabled,
                MultiArrayStatus.MultiArrayEnabled,
                "<code>",
                1234L);
            Response<SessionCodeExecutionResult> response = await client.ExecuteCodeAsync("<identifier>", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_GetCodeExecutionResult_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response response = client.GetCodeExecutionResult("<identifier>", "<executionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_GetCodeExecutionResult_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response response = await client.GetCodeExecutionResultAsync("<identifier>", "<executionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_GetCodeExecutionResult_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response<SessionCodeExecutionResult> response = client.GetCodeExecutionResult("<identifier>", "<executionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_GetCodeExecutionResult_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response<SessionCodeExecutionResult> response = await client.GetCodeExecutionResultAsync("<identifier>", "<executionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_GetCodeExecutionResult_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response response = client.GetCodeExecutionResult("<identifier>", "<executionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_GetCodeExecutionResult_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response response = await client.GetCodeExecutionResultAsync("<identifier>", "<executionId>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("codeInputType").ToString());
            Console.WriteLine(result.GetProperty("executionType").ToString());
            Console.WriteLine(result.GetProperty("networkStatus").ToString());
            Console.WriteLine(result.GetProperty("multiArrayStatus").ToString());
            Console.WriteLine(result.GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("timeoutInSeconds").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_App_GetCodeExecutionResult_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response<SessionCodeExecutionResult> response = client.GetCodeExecutionResult("<identifier>", "<executionId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_App_GetCodeExecutionResult_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            AppClient client = new AppClient(endpoint, credential);

            Response<SessionCodeExecutionResult> response = await client.GetCodeExecutionResultAsync("<identifier>", "<executionId>");
        }
    }
}
