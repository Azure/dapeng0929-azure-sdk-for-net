// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Microsoft.App.DynamicSessions
{
    // Data plane generated sub-client.
    /// <summary> The CodeExecution sub-client. </summary>
    public partial class CodeExecution
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://dynamicsessions.io/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of CodeExecution for mocking. </summary>
        protected CodeExecution()
        {
        }

        /// <summary> Initializes a new instance of CodeExecution. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> The management endpoint of the session pool. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        internal CodeExecution(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Get the code execution result. </summary>
        /// <param name="executionId"> The identifier of code execution. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='GetResultAsync(string,string,CancellationToken)']/*" />
        public virtual async Task<Response<SessionCodeExecutionResponse>> GetResultAsync(string executionId, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetResultAsync(executionId, identifier, context).ConfigureAwait(false);
            return Response.FromValue(SessionCodeExecutionResponse.FromResponse(response), response);
        }

        /// <summary> Get the code execution result. </summary>
        /// <param name="executionId"> The identifier of code execution. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='GetResult(string,string,CancellationToken)']/*" />
        public virtual Response<SessionCodeExecutionResponse> GetResult(string executionId, string identifier, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));
            Argument.AssertNotNull(identifier, nameof(identifier));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetResult(executionId, identifier, context);
            return Response.FromValue(SessionCodeExecutionResponse.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Get the code execution result.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetResultAsync(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionId"> The identifier of code execution. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='GetResultAsync(string,string,RequestContext)']/*" />
        public virtual async Task<Response> GetResultAsync(string executionId, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecution.GetResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResultRequest(executionId, identifier, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Get the code execution result.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetResult(string,string,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="executionId"> The identifier of code execution. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="executionId"/> or <paramref name="identifier"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="executionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='GetResult(string,string,RequestContext)']/*" />
        public virtual Response GetResult(string executionId, string identifier, RequestContext context)
        {
            Argument.AssertNotNullOrEmpty(executionId, nameof(executionId));
            Argument.AssertNotNull(identifier, nameof(identifier));

            using var scope = ClientDiagnostics.CreateScope("CodeExecution.GetResult");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetResultRequest(executionId, identifier, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Execute code in a session. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="codeExecutionRequest"> The request to execute code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="codeExecutionRequest"/> is null. </exception>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='ExecuteCodeAsync(WaitUntil,string,SessionCodeExecutionRequest,CancellationToken)']/*" />
        public virtual async Task<Operation> ExecuteCodeAsync(WaitUntil waitUntil, string identifier, SessionCodeExecutionRequest codeExecutionRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(codeExecutionRequest, nameof(codeExecutionRequest));

            using RequestContent content = codeExecutionRequest.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return await ExecuteCodeAsync(waitUntil, identifier, content, context).ConfigureAwait(false);
        }

        /// <summary> Execute code in a session. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="codeExecutionRequest"> The request to execute code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="codeExecutionRequest"/> is null. </exception>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='ExecuteCode(WaitUntil,string,SessionCodeExecutionRequest,CancellationToken)']/*" />
        public virtual Operation ExecuteCode(WaitUntil waitUntil, string identifier, SessionCodeExecutionRequest codeExecutionRequest, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(codeExecutionRequest, nameof(codeExecutionRequest));

            using RequestContent content = codeExecutionRequest.ToRequestContent();
            RequestContext context = FromCancellationToken(cancellationToken);
            return ExecuteCode(waitUntil, identifier, content, context);
        }

        /// <summary>
        /// [Protocol Method] Execute code in a session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ExecuteCodeAsync(WaitUntil,string,SessionCodeExecutionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='ExecuteCodeAsync(WaitUntil,string,RequestContent,RequestContext)']/*" />
        public virtual async Task<Operation> ExecuteCodeAsync(WaitUntil waitUntil, string identifier, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CodeExecution.ExecuteCode");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExecuteCodeRequest(identifier, content, context);
                return await ProtocolOperationHelpers.ProcessMessageWithoutResponseValueAsync(_pipeline, message, ClientDiagnostics, "CodeExecution.ExecuteCode", OperationFinalStateVia.OperationLocation, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Execute code in a session.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="ExecuteCode(WaitUntil,string,SessionCodeExecutionRequest,CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="identifier"> The identifier of the session. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="identifier"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation"/> representing an asynchronous operation on the service. </returns>
        /// <include file="Docs/CodeExecution.xml" path="doc/members/member[@name='ExecuteCode(WaitUntil,string,RequestContent,RequestContext)']/*" />
        public virtual Operation ExecuteCode(WaitUntil waitUntil, string identifier, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNull(identifier, nameof(identifier));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("CodeExecution.ExecuteCode");
            scope.Start();
            try
            {
                using HttpMessage message = CreateExecuteCodeRequest(identifier, content, context);
                return ProtocolOperationHelpers.ProcessMessageWithoutResponseValue(_pipeline, message, ClientDiagnostics, "CodeExecution.ExecuteCode", OperationFinalStateVia.OperationLocation, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateExecuteCodeRequest(string identifier, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/execute", false);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetResultRequest(string executionId, string identifier, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/execute/", false);
            uri.AppendPath(executionId, true);
            uri.AppendQuery("identifier", identifier, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200202;
        private static ResponseClassifier ResponseClassifier200202 => _responseClassifier200202 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 202 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
