// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Microsoft.App.DynamicSessions.Samples
{
    public partial class Samples_CodeExecution
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeExecution_GetResult_CodeExecutionGetResult()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            Response response = client.GetResult("testexecutionid", "testidentidier", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeExecution_GetResult_CodeExecutionGetResult_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            Response response = await client.GetResultAsync("testexecutionid", "testidentidier", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("stdout").ToString());
            Console.WriteLine(result.GetProperty("stderr").ToString());
            Console.WriteLine(result.GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("executionTimeInMilliseconds").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeExecution_GetResult_CodeExecutionGetResult_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            Response<SessionCodeExecutionResponse> response = client.GetResult("testexecutionid", "testidentidier");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeExecution_GetResult_CodeExecutionGetResult_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            Response<SessionCodeExecutionResponse> response = await client.GetResultAsync("testexecutionid", "testidentidier");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeExecution_ExecuteCode_CodeExecutionExecuteCodeResult()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                codeInputType = "Inline",
                executionType = "Synchronous",
                code = "print(7*9)",
                timeoutInSeconds = 60,
            });
            Operation operation = client.ExecuteCode(WaitUntil.Completed, "testidentidier", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeExecution_ExecuteCode_CodeExecutionExecuteCodeResult_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            using RequestContent content = RequestContent.Create(new
            {
                codeInputType = "Inline",
                executionType = "Synchronous",
                code = "print(7*9)",
                timeoutInSeconds = 60,
            });
            Operation operation = await client.ExecuteCodeAsync(WaitUntil.Completed, "testidentidier", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CodeExecution_ExecuteCode_CodeExecutionExecuteCodeResult_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(CodeInputType.Inline, ExecutionType.Synchronous, "print(7*9)", 60);
            Operation operation = client.ExecuteCode(WaitUntil.Completed, "testidentidier", codeExecutionRequest);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CodeExecution_ExecuteCode_CodeExecutionExecuteCodeResult_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            TokenCredential credential = new DefaultAzureCredential();
            CodeExecution client = new DynamicSessionsClient(endpoint, credential).GetCodeExecutionClient(apiVersion: "2024-09-01");

            SessionCodeExecutionRequest codeExecutionRequest = new SessionCodeExecutionRequest(CodeInputType.Inline, ExecutionType.Synchronous, "print(7*9)", 60);
            Operation operation = await client.ExecuteCodeAsync(WaitUntil.Completed, "testidentidier", codeExecutionRequest);
        }
    }
}
