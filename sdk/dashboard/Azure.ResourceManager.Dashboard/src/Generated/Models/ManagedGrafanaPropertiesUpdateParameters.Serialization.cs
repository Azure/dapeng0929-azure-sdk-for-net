// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Dashboard.Models
{
    public partial class ManagedGrafanaPropertiesUpdateParameters : IUtf8JsonSerializable, IJsonModel<ManagedGrafanaPropertiesUpdateParameters>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ManagedGrafanaPropertiesUpdateParameters>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<ManagedGrafanaPropertiesUpdateParameters>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ManagedGrafanaPropertiesUpdateParameters)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(ZoneRedundancy))
            {
                writer.WritePropertyName("zoneRedundancy"u8);
                writer.WriteStringValue(ZoneRedundancy.Value.ToString());
            }
            if (Optional.IsDefined(ApiKey))
            {
                writer.WritePropertyName("apiKey"u8);
                writer.WriteStringValue(ApiKey.Value.ToString());
            }
            if (Optional.IsDefined(DeterministicOutboundIP))
            {
                writer.WritePropertyName("deterministicOutboundIP"u8);
                writer.WriteStringValue(DeterministicOutboundIP.Value.ToString());
            }
            if (Optional.IsDefined(PublicNetworkAccess))
            {
                writer.WritePropertyName("publicNetworkAccess"u8);
                writer.WriteStringValue(PublicNetworkAccess.Value.ToString());
            }
            if (Optional.IsDefined(GrafanaIntegrations))
            {
                writer.WritePropertyName("grafanaIntegrations"u8);
                writer.WriteObjectValue(GrafanaIntegrations, options);
            }
            if (Optional.IsDefined(EnterpriseConfigurations))
            {
                writer.WritePropertyName("enterpriseConfigurations"u8);
                writer.WriteObjectValue(EnterpriseConfigurations, options);
            }
            if (Optional.IsDefined(GrafanaConfigurations))
            {
                writer.WritePropertyName("grafanaConfigurations"u8);
                writer.WriteObjectValue(GrafanaConfigurations, options);
            }
            if (Optional.IsCollectionDefined(GrafanaPlugins))
            {
                writer.WritePropertyName("grafanaPlugins"u8);
                writer.WriteStartObject();
                foreach (var item in GrafanaPlugins)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value, options);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsDefined(GrafanaMajorVersion))
            {
                writer.WritePropertyName("grafanaMajorVersion"u8);
                writer.WriteStringValue(GrafanaMajorVersion);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ManagedGrafanaPropertiesUpdateParameters IJsonModel<ManagedGrafanaPropertiesUpdateParameters>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(ManagedGrafanaPropertiesUpdateParameters)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeManagedGrafanaPropertiesUpdateParameters(document.RootElement, options);
        }

        internal static ManagedGrafanaPropertiesUpdateParameters DeserializeManagedGrafanaPropertiesUpdateParameters(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ZoneRedundancy? zoneRedundancy = default;
            ApiKey? apiKey = default;
            DeterministicOutboundIP? deterministicOutboundIP = default;
            PublicNetworkAccess? publicNetworkAccess = default;
            GrafanaIntegrations grafanaIntegrations = default;
            EnterpriseConfigurations enterpriseConfigurations = default;
            GrafanaConfigurations grafanaConfigurations = default;
            IDictionary<string, GrafanaPlugin> grafanaPlugins = default;
            string grafanaMajorVersion = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("zoneRedundancy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    zoneRedundancy = new ZoneRedundancy(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("apiKey"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    apiKey = new ApiKey(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("deterministicOutboundIP"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deterministicOutboundIP = new DeterministicOutboundIP(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("publicNetworkAccess"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    publicNetworkAccess = new PublicNetworkAccess(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("grafanaIntegrations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    grafanaIntegrations = GrafanaIntegrations.DeserializeGrafanaIntegrations(property.Value, options);
                    continue;
                }
                if (property.NameEquals("enterpriseConfigurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enterpriseConfigurations = EnterpriseConfigurations.DeserializeEnterpriseConfigurations(property.Value, options);
                    continue;
                }
                if (property.NameEquals("grafanaConfigurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    grafanaConfigurations = GrafanaConfigurations.DeserializeGrafanaConfigurations(property.Value, options);
                    continue;
                }
                if (property.NameEquals("grafanaPlugins"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, GrafanaPlugin> dictionary = new Dictionary<string, GrafanaPlugin>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, GrafanaPlugin.DeserializeGrafanaPlugin(property0.Value, options));
                    }
                    grafanaPlugins = dictionary;
                    continue;
                }
                if (property.NameEquals("grafanaMajorVersion"u8))
                {
                    grafanaMajorVersion = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new ManagedGrafanaPropertiesUpdateParameters(
                zoneRedundancy,
                apiKey,
                deterministicOutboundIP,
                publicNetworkAccess,
                grafanaIntegrations,
                enterpriseConfigurations,
                grafanaConfigurations,
                grafanaPlugins ?? new ChangeTrackingDictionary<string, GrafanaPlugin>(),
                grafanaMajorVersion,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(ManagedGrafanaPropertiesUpdateParameters)} does not support writing '{options.Format}' format.");
            }
        }

        ManagedGrafanaPropertiesUpdateParameters IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeManagedGrafanaPropertiesUpdateParameters(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(ManagedGrafanaPropertiesUpdateParameters)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<ManagedGrafanaPropertiesUpdateParameters>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
