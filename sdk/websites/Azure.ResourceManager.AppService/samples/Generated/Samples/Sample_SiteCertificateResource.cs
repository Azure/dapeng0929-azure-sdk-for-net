// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.AppService.Models;

namespace Azure.ResourceManager.AppService.Samples
{
    public partial class Sample_SiteCertificateResource
    {
        // Get Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetCertificate()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/GetSiteCertificate.json
            // this example is just showing the usage of "SiteCertificates_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SiteCertificateResource created on azure
            // for more information of creating SiteCertificateResource, please refer to the document of SiteCertificateResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string siteName = "testSiteName";
            string name = "testc6282";
            ResourceIdentifier siteCertificateResourceId = SiteCertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, siteName, name);
            SiteCertificateResource siteCertificate = client.GetSiteCertificateResource(siteCertificateResourceId);

            // invoke the operation
            SiteCertificateResource result = await siteCertificate.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppCertificateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteCertificate()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/DeleteSiteCertificate.json
            // this example is just showing the usage of "SiteCertificates_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SiteCertificateResource created on azure
            // for more information of creating SiteCertificateResource, please refer to the document of SiteCertificateResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string siteName = "testSiteName";
            string name = "testc6282";
            ResourceIdentifier siteCertificateResourceId = SiteCertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, siteName, name);
            SiteCertificateResource siteCertificate = client.GetSiteCertificateResource(siteCertificateResourceId);

            // invoke the operation
            await siteCertificate.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Patch Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_PatchCertificate()
        {
            // Generated from example definition: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/PatchSiteCertificate.json
            // this example is just showing the usage of "SiteCertificates_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SiteCertificateResource created on azure
            // for more information of creating SiteCertificateResource, please refer to the document of SiteCertificateResource
            string subscriptionId = "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
            string resourceGroupName = "testrg123";
            string siteName = "testSiteName";
            string name = "testc6282";
            ResourceIdentifier siteCertificateResourceId = SiteCertificateResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, siteName, name);
            SiteCertificateResource siteCertificate = client.GetSiteCertificateResource(siteCertificateResourceId);

            // invoke the operation
            CertificatePatchResource certificateEnvelope = new CertificatePatchResource()
            {
                Password = "<password>",
            };
            SiteCertificateResource result = await siteCertificate.UpdateAsync(certificateEnvelope);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            AppCertificateData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
